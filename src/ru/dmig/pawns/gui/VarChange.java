/*
 * Copyright (C) 2018 Dmig
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package ru.dmig.pawns.gui;

import java.util.Timer;
import java.util.TimerTask;
import ru.dmig.pawns.Game;

/**
 * Class of GUI for changing main variables (Game and Pawn classes)
 * @author Dmig
 */
public final class VarChange extends javax.swing.JFrame {

    protected static enum ValueType {
        PAWN, TURN, CYCLE, FOOD, KILLER
    };

    public static void init() {
        java.awt.EventQueue.invokeLater(() -> {
            new VarChange().setVisible(true);
        });
    }

    /**
     * Creates new form VarChange
     */
    public VarChange() {
        initComponents();
        setupUpdater();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pawnP = new javax.swing.JPanel();
        pawnAL = new javax.swing.JLabel();
        pawnAC = new javax.swing.JButton();
        turnP = new javax.swing.JPanel();
        turnAL = new javax.swing.JLabel();
        turnAC = new javax.swing.JButton();
        cycleP = new javax.swing.JPanel();
        cycleAL = new javax.swing.JLabel();
        cycleAC = new javax.swing.JButton();
        foodP = new javax.swing.JPanel();
        foodAL = new javax.swing.JLabel();
        foodAC = new javax.swing.JButton();
        killerP = new javax.swing.JPanel();
        killerAL = new javax.swing.JLabel();
        killerAC = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Globals");
        setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        setName("globals"); // NOI18N
        setResizable(false);

        pawnAL.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        pawnAL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pawnAL.setText("Pawn amount: 000");

        pawnAC.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        pawnAC.setText("Change");
        pawnAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pawnACActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pawnPLayout = new javax.swing.GroupLayout(pawnP);
        pawnP.setLayout(pawnPLayout);
        pawnPLayout.setHorizontalGroup(
            pawnPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pawnPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pawnAL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pawnAC)
                .addContainerGap())
        );
        pawnPLayout.setVerticalGroup(
            pawnPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pawnAL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pawnAC, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        turnAL.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        turnAL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        turnAL.setText("Turn amount: 000");

        turnAC.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        turnAC.setText("Change");
        turnAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnACActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout turnPLayout = new javax.swing.GroupLayout(turnP);
        turnP.setLayout(turnPLayout);
        turnPLayout.setHorizontalGroup(
            turnPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(turnPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(turnAL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(turnAC)
                .addContainerGap())
        );
        turnPLayout.setVerticalGroup(
            turnPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(turnAL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(turnAC, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        cycleAL.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        cycleAL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cycleAL.setText("Cycle amount: 00k");

        cycleAC.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        cycleAC.setText("Change");
        cycleAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cycleACActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cyclePLayout = new javax.swing.GroupLayout(cycleP);
        cycleP.setLayout(cyclePLayout);
        cyclePLayout.setHorizontalGroup(
            cyclePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cyclePLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cycleAL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cycleAC)
                .addContainerGap())
        );
        cyclePLayout.setVerticalGroup(
            cyclePLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cycleAL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cycleAC, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        foodAL.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        foodAL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        foodAL.setText("Food amount: 000");

        foodAC.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        foodAC.setText("Change");
        foodAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foodACActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout foodPLayout = new javax.swing.GroupLayout(foodP);
        foodP.setLayout(foodPLayout);
        foodPLayout.setHorizontalGroup(
            foodPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(foodPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(foodAL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(foodAC)
                .addContainerGap())
        );
        foodPLayout.setVerticalGroup(
            foodPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(foodAL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(foodAC, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        killerAL.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        killerAL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        killerAL.setText("Kilr amount: 000");
        killerAL.setToolTipText("");

        killerAC.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        killerAC.setText("Change");
        killerAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                killerACActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout killerPLayout = new javax.swing.GroupLayout(killerP);
        killerP.setLayout(killerPLayout);
        killerPLayout.setHorizontalGroup(
            killerPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(killerPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(killerAL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(killerAC)
                .addContainerGap())
        );
        killerPLayout.setVerticalGroup(
            killerPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(killerAL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(killerAC, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pawnP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(turnP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cycleP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(foodP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(killerP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pawnP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(turnP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cycleP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(foodP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(killerP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pawnACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pawnACActionPerformed
        Game.AMOUNT_OF_PAWNS = (int) getUserValue(ValueType.PAWN);
    }//GEN-LAST:event_pawnACActionPerformed

    private void turnACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnACActionPerformed
        Game.TURN_PAWN_AMOUNT = (int) getUserValue(ValueType.TURN);
    }//GEN-LAST:event_turnACActionPerformed

    private void cycleACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cycleACActionPerformed
        Game.CYCLE_AMOUNT = (int) getUserValue(ValueType.CYCLE);
    }//GEN-LAST:event_cycleACActionPerformed

    private void foodACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foodACActionPerformed
        Game.FOOD_AMOUNT = (int) getUserValue(ValueType.FOOD);
    }//GEN-LAST:event_foodACActionPerformed

    private void killerACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_killerACActionPerformed
        Game.KILLER_AMOUNT = (int) getUserValue(ValueType.KILLER);
    }//GEN-LAST:event_killerACActionPerformed

    public static double getUserValue(ValueType valueType) {
        double newValue;
        String subject;
        switch (valueType) {
            case PAWN:
                subject = "pawn ";
                break;
            case TURN:
                subject = "turn ";
                break;
            case CYCLE:
                subject = "cycle ";
                break;
            case FOOD:
                subject = "food ";
                break;
            case KILLER:
                subject = "killer ";
                break;
            default:
                subject = "";
                throw new AssertionError();
        }
        subject += "amount";
        while (true) {
            try {
                newValue = Game.askUserValue("Enter a new " + subject + ".");
                if(newValue % 1 != 0) throw new NumberFormatException();
                switch (valueType) {
                    case PAWN:
                        if(newValue > 0 && newValue % 4 == 0) {
                            return newValue;
                        } else {
                            throw new NumberFormatException();
                        }
                    case TURN:
                        if(newValue > 0 && newValue <= Game.AMOUNT_OF_PAWNS &&
                                Game.AMOUNT_OF_PAWNS % newValue == 0) {
                            return newValue;
                        } else {
                            throw new NumberFormatException();
                        }
                    case CYCLE:
                        if(newValue >= 1000 && newValue % 1000 == 0) {
                            return newValue;
                        } else {
                            throw new NumberFormatException();
                        }
                    case FOOD:
                        if(newValue > 0) {
                            return newValue;
                        } else {
                            throw new NumberFormatException();
                        }
                    case KILLER:
                        if(newValue > 0) {
                            return newValue;
                        } else {
                            throw new NumberFormatException();
                        }
                    default:
                        throw new AssertionError();
                }
            } catch (NumberFormatException ex) {
                System.out.println("!Problem with entering new " + subject);
            }
        }
    }

    public void setupUpdater() {
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                update();
            }
        }, 100, 100);
    }

    public void update() {
        updateLabels(Game.AMOUNT_OF_PAWNS, Game.TURN_PAWN_AMOUNT,
                Game.CYCLE_AMOUNT, Game.FOOD_AMOUNT, Game.KILLER_AMOUNT);
    }

    protected void updateLabels(double pawn, double turn, double cycle, double food, double killers) {
        pawnAL.setText("Pawn amount: " + pawn);
        turnAL.setText("Turn amount: " + turn);
        cycleAL.setText("Cycle amount: " + (cycle / 1000) + "k");
        foodAL.setText("Food amount: " + food);
        killerAL.setText("Kilr amount: " + killers);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cycleAC;
    private javax.swing.JLabel cycleAL;
    private javax.swing.JPanel cycleP;
    private javax.swing.JButton foodAC;
    private javax.swing.JLabel foodAL;
    private javax.swing.JPanel foodP;
    private javax.swing.JButton killerAC;
    private javax.swing.JLabel killerAL;
    private javax.swing.JPanel killerP;
    private javax.swing.JButton pawnAC;
    private javax.swing.JLabel pawnAL;
    private javax.swing.JPanel pawnP;
    private javax.swing.JButton turnAC;
    private javax.swing.JLabel turnAL;
    private javax.swing.JPanel turnP;
    // End of variables declaration//GEN-END:variables
}
